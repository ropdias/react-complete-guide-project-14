import React, { useState, useEffect } from "react";

import IngredientForm from "./IngredientForm";
import IngredientList from "./IngredientList";
import Search from "./Search";

const Ingredients = () => {
  const [userIngredients, setUserIngredients] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const response = await fetch(
        "https://react-http-ef0dc-default-rtdb.firebaseio.com/ingredients.json"
      );
      const responseData = await response.json();
      const loadedIngredients = [];
      for (const key in responseData) {
        loadedIngredients.push({
          id: key,
          title: responseData[key].title,
          amount: responseData[key].amount,
        });
      }
      // setUserIngredients is a function generated by useState and it never changes
      // So we dont have to add it as a dependency in the useEffect
      setUserIngredients(loadedIngredients);
    };
    fetchData();
  }, []);

  const addIngredientHandler = async (ingredient) => {
    const response = await fetch(
      "https://react-http-ef0dc-default-rtdb.firebaseio.com/ingredients.json",
      {
        method: "POST",
        body: JSON.stringify(ingredient),
        headers: { "Content-Type": "application/json" },
      }
    );
    const responseData = await response.json();
    setUserIngredients((prevIngredients) => {
      return [...prevIngredients, { id: responseData.name, ...ingredient }];
    });
  };

  const removeIngredientHandler = (id) => {
    setUserIngredients((prevIngredients) => {
      return prevIngredients.filter((ingredient) => ingredient.id !== id);
    });
  };

  return (
    <div className="App">
      <IngredientForm onAddIngredient={addIngredientHandler} />

      <section>
        <Search />
        <IngredientList
          ingredients={userIngredients}
          onRemoveItem={removeIngredientHandler}
        />
        {/* Need to add list here! */}
      </section>
    </div>
  );
};

export default Ingredients;
